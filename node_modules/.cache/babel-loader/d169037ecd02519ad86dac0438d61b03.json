{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subed\\\\OneDrive\\\\Javascript\\\\01-starting-setup\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/UI/Button/Button\"; // React will only rerun App function if state changes\n// only the difference between virtual snapshots is made to the updated\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showParagraph, setShowParagraph] = useState(false); // showing element conditionally\n  // so currently our state is false, so we only see Hi there. - add function to change the state\n\n  console.log(\"App Running\"); // since app executes every time state changes, App running will be output on console everytime you click toggle\n\n  const toggleParagraphHandler = () => {\n    // opposite of show paragraph, but instead of passing it directly,\n    // use a function, pass it as a parameter then reverse it\n    setShowParagraph(prevShowParagraph => !prevShowParagraph);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), showParagraph && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This is new!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagraphHandler,\n      children: \"Toggle Paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eoYUlDKWxWYgikVZpaPr2UN2QyM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Button","App","showParagraph","setShowParagraph","console","log","toggleParagraphHandler","prevShowParagraph"],"sources":["C:/Users/subed/OneDrive/Javascript/01-starting-setup/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Button from \"./components/UI/Button/Button\";\n\n// React will only rerun App function if state changes\n// only the difference between virtual snapshots is made to the updated\nfunction App() {\n  const [showParagraph, setShowParagraph] = useState(false); // showing element conditionally\n  // so currently our state is false, so we only see Hi there. - add function to change the state\n\n  console.log(\"App Running\"); // since app executes every time state changes, App running will be output on console everytime you click toggle\n\n  const toggleParagraphHandler = () => {\n    // opposite of show paragraph, but instead of passing it directly,\n    // use a function, pass it as a parameter then reverse it\n    setShowParagraph((prevShowParagraph) => !prevShowParagraph);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      {showParagraph && <p>This is new!</p>}\n\n      {/* this function triggers Toggle Paragraph Button when clicked*/}\n      <Button onClick={toggleParagraphHandler}>Toggle Paragraph</Button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,+BAAnB,C,CAEA;AACA;;;;AACA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,KAAD,CAAlD,CADa,CAC8C;EAC3D;;EAEAK,OAAO,CAACC,GAAR,CAAY,aAAZ,EAJa,CAIe;;EAE5B,MAAMC,sBAAsB,GAAG,MAAM;IACnC;IACA;IACAH,gBAAgB,CAAEI,iBAAD,IAAuB,CAACA,iBAAzB,CAAhB;EACD,CAJD;;EAMA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAEGL,aAAa,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFpB,eAKE,QAAC,MAAD;MAAQ,OAAO,EAAEI,sBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GArBQL,G;;KAAAA,G;AAuBT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}