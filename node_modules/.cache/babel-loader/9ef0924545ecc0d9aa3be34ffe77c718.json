{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subed\\\\OneDrive\\\\Javascript\\\\01-starting-setup\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/UI/Button/Button\";\nimport DemoOutput from \"./components/UI/Button/Demo/DemoOutput\"; // React will only rerun App function if state changes\n// only the difference between virtual snapshots is considered for the updates made through the real DOM.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showParagraph, setShowParagraph] = useState(false); // showing element conditionally\n  // so currently our state is false, so we only see Hi there. - add function to change the state\n\n  const [allowToggling, setAllowToggling] = useState(false);\n  console.log(\"App Running\"); // since app executes every time state changes, App running will be output on console everytime you click toggle\n\n  const toggleParagraphHandler = useCallback(() => {\n    // reuse the same function object - useCallback\n    // opposite of show paragraph, but instead of passing it directly,\n    // use a function, pass it as a parameter then reverse it\n    setShowParagraph(prevShowParagraph => !prevShowParagraph); // reversing true to false, false to true\n  }, []); // empty array of dependency because there are none\n\n  const allowTogglingHandler = () => {\n    setAllowToggling(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DemoOutput, {\n      show: showParagraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n      onClick: allowTogglingHandler,\n      children: \"Allow Toggling\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagraphHandler,\n      children: \"Toggle Paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SDRdbVS0ZAwiTaqI4UxMfyPYo1g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","Button","DemoOutput","App","showParagraph","setShowParagraph","allowToggling","setAllowToggling","console","log","toggleParagraphHandler","prevShowParagraph","allowTogglingHandler"],"sources":["C:/Users/subed/OneDrive/Javascript/01-starting-setup/src/App.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\n\nimport \"./App.css\";\nimport Button from \"./components/UI/Button/Button\";\nimport DemoOutput from \"./components/UI/Button/Demo/DemoOutput\";\n\n// React will only rerun App function if state changes\n// only the difference between virtual snapshots is considered for the updates made through the real DOM.\nfunction App() {\n  const [showParagraph, setShowParagraph] = useState(false); // showing element conditionally\n  // so currently our state is false, so we only see Hi there. - add function to change the state\n\n  const [allowToggling, setAllowToggling] = useState(false);\n\n  console.log(\"App Running\"); // since app executes every time state changes, App running will be output on console everytime you click toggle\n\n  const toggleParagraphHandler = useCallback(() => {\n    // reuse the same function object - useCallback\n    // opposite of show paragraph, but instead of passing it directly,\n    // use a function, pass it as a parameter then reverse it\n    setShowParagraph((prevShowParagraph) => !prevShowParagraph); // reversing true to false, false to true\n  }, []); // empty array of dependency because there are none\n\n  const allowTogglingHandler = () => {\n    setAllowToggling(true);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      {/*showParagraph && <p>This is new!</p>*/}\n      <DemoOutput show={showParagraph} />{\" \"}\n      {/*----- but if the value is hardcoded to false} */}\n      {/*<DemoOutput show={false} />{\" \"} */}\n      {/*the props didnt change, but demo output is printed in the screen ,why was demo-output re-executed? \n      It is because demo output is a part of App component, in app component state changes because of toggleParagraphHandler function. So,\n    App component re-executed. So, child component is also re-evalauted because the state of parent component changed}\n\n      {/* this function triggers Toggle Paragraph Button when clicked*/}\n      <Button onClick={allowTogglingHandler}>Allow Toggling</Button>\n      <Button onClick={toggleParagraphHandler}>Toggle Paragraph</Button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,UAAP,MAAuB,wCAAvB,C,CAEA;AACA;;;;AACA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,KAAD,CAAlD,CADa,CAC8C;EAC3D;;EAEA,MAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,KAAD,CAAlD;EAEAQ,OAAO,CAACC,GAAR,CAAY,aAAZ,EANa,CAMe;;EAE5B,MAAMC,sBAAsB,GAAGX,WAAW,CAAC,MAAM;IAC/C;IACA;IACA;IACAM,gBAAgB,CAAEM,iBAAD,IAAuB,CAACA,iBAAzB,CAAhB,CAJ+C,CAIc;EAC9D,CALyC,EAKvC,EALuC,CAA1C,CARa,CAaL;;EAER,MAAMC,oBAAoB,GAAG,MAAM;IACjCL,gBAAgB,CAAC,IAAD,CAAhB;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAGE,QAAC,UAAD;MAAY,IAAI,EAAEH;IAAlB;MAAA;MAAA;MAAA;IAAA,QAHF,EAGsC,GAHtC,eAWE,QAAC,MAAD;MAAQ,OAAO,EAAEQ,oBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAXF,eAYE,QAAC,MAAD;MAAQ,OAAO,EAAEF,sBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAZF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD;;GAnCQP,G;;KAAAA,G;AAqCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}